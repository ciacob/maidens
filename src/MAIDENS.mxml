<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication autoExit="false"
                       frameRate="30"
                       usePreloader="false"
                       showStatusBar="false"
                       width="580"
                       height="300"
                       preinitialize="_onPreinitialize(event)"
                       applicationComplete="_onApplicationComplete(event)"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:mx="library://ns.adobe.com/flex/mx">

    <!-- Application Style -->
    <fx:Style source="../../maidens-ui-commons/src/eu/claudius/iacob/maidens/assets/common.css"/>

    <fx:Script>
        <![CDATA[
        import com.adobe.errors.IllegalStateError;

        import eu.claudius.iacob.EmbeddedFontsHelper;
        import eu.claudius.iacob.maidens.Colors;
        import eu.claudius.iacob.maidens.Sizes;
        import eu.claudiusiacob.desktop.GlobalMenu;
        import eu.claudiusiacob.desktop.GlobalMenuEvent;

        import mx.events.FlexEvent;

        import ro.ciacob.desktop.signals.PTT;
        import ro.ciacob.desktop.windows.IWindowContent;
        import ro.ciacob.desktop.windows.WindowActivity;
        import ro.ciacob.desktop.windows.WindowStyle;
        import ro.ciacob.desktop.windows.WindowsManager;
        import ro.ciacob.desktop.windows.WindowsManagerEvent;
        import ro.ciacob.maidens.controller.Controller;
        import ro.ciacob.maidens.controller.GhostScriptChecker;
        import ro.ciacob.maidens.model.constants.DataFields;
        import ro.ciacob.maidens.model.constants.GlobalMenuData;
        import ro.ciacob.maidens.model.constants.StaticTokens;
        import ro.ciacob.maidens.view.MainUi;
        import ro.ciacob.maidens.view.constants.MenuCommandNames;
        import ro.ciacob.maidens.view.constants.UiColorizationThemes;
        import ro.ciacob.maidens.view.constants.ViewKeys;
        import ro.ciacob.utils.Descriptor;
        import ro.ciacob.utils.OSFamily;
        import ro.ciacob.utils.ScreenUtils;
        import ro.ciacob.utils.Strings;
        import ro.ciacob.utils.Time;
        import ro.ciacob.utils.constants.CommonStrings;

        private static const GLOBAL_PIPE:PTT = PTT.getPipe();
        private static const ALL_THEMES:Array = UiColorizationThemes.getAllThemes();

        private var _mainWinUid:String;
        private var _rootContent:Object
        private var _wManager:WindowsManager;
        private var _globalMenu:GlobalMenu;
        private var _splashNativeWindow:NativeWindow;

        // We need to actually "use" the EmbeddedFontsHelper class, or else it won't be compiled 
        // (although included) and the embedded fonts will not be available.
        private const ignore_compileHelper1:Class = EmbeddedFontsHelper;

        /**
         * On macOs we rely on ghostscript being already installed on the system in order to
         * enable PDF export. Therefore we initialize the menu item as disabled, and only enable
         * it upon successfully detecting ghostscript. On Windows, we pack the third-party executable
         * with MAIDENS, so the menu item is always enabled.
         */
        private function _checkForPdfSupport():void {
            var checker:GhostScriptChecker = new GhostScriptChecker();
            checker.addEventListener(GhostScriptChecker.GHOSTSCRIPT_CHECK_EVENT, _onGhostScriptCheckEvent);
            checker.checkGhostscriptInstallation();
        }

        /**
         * Executed when detection of ghostscript has concluded.
         * @param event
         */
        private function _onGhostScriptCheckEvent(event:Event):void {
            var checker:GhostScriptChecker = (event.target as GhostScriptChecker);
            var havePdfSupport:Boolean = (checker.ghostscriptPath != null);
            _globalMenu.setItemEnablement(MenuCommandNames.EXPORT_PROJECT_TO_PDF, havePdfSupport);
        }

        /**
         * Equivalent of a constructor function for MXML classes.
         * @param event
         */
        private function _onPreinitialize(event:FlexEvent):void {

            // Monitor changes to current theme to update the global menu accordingly
            GLOBAL_PIPE.subscribe(ViewKeys.COLORIZATION_UPDATED, _onColorizationChanged);

            // Monitor changes to Undo/Redo availability
            GLOBAL_PIPE.subscribe(ViewKeys.UNDO_REDO_STATUSQUO, _onUndoRedoStatusUpdate);

            // Monitor changes that affect editing operations availability (e.g., copy/paste/cut, macros, etc.).
            GLOBAL_PIPE.subscribe(ViewKeys.STRUCTURE_OPERATIONS_STATUS, _onOperationsStatusUpdate);

            // Initialize our handler for the "global menu". This is the menu that attaches to the main
            // window on Windows, or becomes the application menu on macOS. On mac OS, we can already attach the menu;
            // on Windows, we must wait for the main window to become available.
            _globalMenu = new GlobalMenu(GlobalMenuData.STRUCTURE, NativeApplication.nativeApplication,
                    Descriptor.getAppSignature());
            _globalMenu.addEventListener(GlobalMenuEvent.ITEM_SELECT, _onGlobalItemSelected);
            if (OSFamily.isMac) {
                _globalMenu.attach();
                _checkForPdfSupport();
            } else {
                _globalMenu.setItemEnablement(MenuCommandNames.EXPORT_PROJECT_TO_PDF, true);
            }

            // Look up for the splash screen finishing drawing. We will start loading the rest of the application once
            // it does.
            addEventListener(FlexEvent.UPDATE_COMPLETE, _onSplashScreenDrawn);

            // Create the content for the main window
            _rootContent = new MainUi;

            // Create main window itself.
            _wManager = new WindowsManager;
            _wManager.addEventListener(WindowsManagerEvent.MAIN_WINDOW_BLOCKED, _onMainWindowBlocked);
            _wManager.addEventListener(WindowsManagerEvent.MAIN_WINDOW_UNBLOCKED, _onMainWindowUnblocked);
            _mainWinUid = _wManager.createWindow(IWindowContent(_rootContent),
                    WindowStyle.MAIN_NO_FOOTER | WindowStyle.NATIVE);
            if (_mainWinUid != null) {
                _wManager.observeWindowActivity(_mainWinUid, WindowActivity.BEFORE_DESTROY, _onDirectWindowClose, this);
                _wManager.observeWindowActivity(_mainWinUid, WindowActivity.FOCUS, _onMainWindowShown, this);
                _wManager.updateWindowMinSize(_mainWinUid, Sizes.MIN_MAIN_WINDOW_BOUNDS.width,
                        Sizes.MIN_MAIN_WINDOW_BOUNDS.height);
            } else {
                throw (new Error('Window Manager could not create the main window.'));
            }

            // Listen for title change requests
            PTT.getPipe().subscribe(ViewKeys.UPDATE_MAIN_TITLE, _onTitleUpdateRequested);
        }

        /**
         * Executed when the main window becomes "blocked", e.g., by a modal child window. Disables the global menu,
         * if there is one.
         * @param event
         */
        private function _onMainWindowBlocked(event:WindowsManagerEvent):void {
            if (_globalMenu) {
                _globalMenu.block();
            }
        }

        /**
         * Executed when the main window becomes "un-blocked", e.g., by closing a modal child window that previously
         * "blocked" it. Re-enables the global menu, if there is one.
         * @param event
         */
        private function _onMainWindowUnblocked(event:WindowsManagerEvent):void {
            if (_globalMenu) {
                _globalMenu.unblock();
            }
        }

        /**
         * This function serves as the initial opportunity to confirm the existence of the NativeWindow for the splash
         * screen. It's essential for distinguishing the main window's NativeWindow at a subsequent stage.
         * @param event
         */
        private function _onApplicationComplete(event:FlexEvent):void {
            _splashNativeWindow = this.nativeWindow;
        }

        /**
         * Executed after the splash screen has been successfully drawn.
         */
        private function _onSplashScreenDrawn(event:FlexEvent):void {
            removeEventListener(FlexEvent.UPDATE_COMPLETE, _onSplashScreenDrawn);
            var mainScreenInfo:Object = ScreenUtils.getScreensInfo()[0];
            if (mainScreenInfo) {

                // Center the splash screen window
                _splashNativeWindow.x = mainScreenInfo.x + (mainScreenInfo.width - _splashNativeWindow.width) * 0.5;
                _splashNativeWindow.y = mainScreenInfo.y + (mainScreenInfo.height - _splashNativeWindow.height) * 0.5;

                // Fit main window to the main screen
                var appBounds:Rectangle = Sizes.FULL_HD_THRESHOLD_BOUNDS.clone();
                if (appBounds.width > mainScreenInfo.width) {
                    appBounds.width = mainScreenInfo.width;
                }
                if (appBounds.height > mainScreenInfo.height) {
                    appBounds.height = mainScreenInfo.height;
                }
                _wManager.updateWindowBounds(_mainWinUid, appBounds);
                _setMainWindowTitle();

                // Initialize the application
                new Controller(DisplayObjectContainer(_rootContent), _wManager, _mainWinUid);

                // Show the main window; its content will be revealed with a "fade-in" animation.
                Time.delay(2, function ():void {
                    _wManager.showWindow(_mainWinUid);

                    // Center the main window to the main screen (only relevant if the main screen resolution is larger than
                    // 1920 x 1080, aka "full HD" resolution.
                    _wManager.alignWindowToScreen(_mainWinUid, mainScreenInfo.uid, 0.5, 0.5);
                });
            } else {
                throw (new IllegalStateError("Error: `mainScreenInfo` was empty. We cannot continue."));
            }
        }

        /**
         * Executed when user makes an attempt to close the main window. We interpret this as a request to exit the
         * application (including on macOS), which we'll fulfill when safe.
         * @param ignore
         */
        private static function _onDirectWindowClose(ignore:String):Boolean {
            PTT.getPipe().send(ViewKeys.APP_EXIT_BUTTON_CLICK);
            return false;
        }

        /**
         * Executed in response to an internal request of modifying the title of the application's main window.
         * @param title
         */
        private function _onTitleUpdateRequested(title:String):void {
            _setMainWindowTitle(title);
        }

        /**
         * Executed in response to the user selecting an item in the application (macOS) or main window (Windows) menu,
         * via either mouse or keyboard.
         * @param event
         */
        private static function _onGlobalItemSelected(event:GlobalMenuEvent):void {
            var cmdTokens:Array = event.cmdName.split(CommonStrings.BROKEN_VERTICAL_BAR);
            var commandName:String = cmdTokens[0];
            var commandArgs:Array = cmdTokens[1] ? cmdTokens[1].split(CommonStrings.COMMA) : [];
            GLOBAL_PIPE.send(ViewKeys.APP_MENU_TRIGGERED, {
                'commandName': commandName,
                'commandArgs': commandArgs
            });
        }

        /**
         * Executed when the current theme is changed, either by the user, via the "View -> Theme"
         * sub-menu, or by the Controller, by reading a property from the application persistence.
         *
         * @param   themeName
         *          The name of the current theme, in its raw format, e.g., "$LIGHT". See the
         *          constants in class UiColorizationThemes.
         */
        private function _onColorizationChanged(themeName:String):void {
            var testCmdName:String = [MenuCommandNames.APPLY_THEME, themeName]
                    .join(CommonStrings.BROKEN_VERTICAL_BAR);
            for each (var themeInfo:Object in ALL_THEMES) {
                var itemCmdName:String = [MenuCommandNames.APPLY_THEME, themeInfo.key]
                        .join(CommonStrings.BROKEN_VERTICAL_BAR);
                _globalMenu.setItemChecked(itemCmdName, itemCmdName == testCmdName);
            }
        }

        /**
         * Triggered when there has been a notification received that deals with the
         * availability of the Undo/Redo buttons, as well as with additional related info.
         */
        private function _onUndoRedoStatusUpdate(status:Object):void {
            var canUndo:Boolean = status[ViewKeys.CAN_UNDO] as Boolean;
            var canRedo:Boolean = status[ViewKeys.CAN_REDO] as Boolean;
            var undoDescription:String = status[ViewKeys.UNDO_DESCRIPTION] as String;
            var redoDescription:String = status[ViewKeys.REDO_DESCRIPTION] as String;
            if (undoDescription) {
                undoDescription = Strings.sprintf(StaticTokens.UNDO_LABEL, undoDescription);
            }
            if (redoDescription) {
                redoDescription = Strings.sprintf(StaticTokens.REDO_LABEL, redoDescription);
            }
            _globalMenu.setItemLabel(MenuCommandNames.UNDO, canUndo ? undoDescription : StaticTokens.UNDO_PLACEHOLDER);
            _globalMenu.setItemEnablement(MenuCommandNames.UNDO, canUndo);
            _globalMenu.setItemLabel(MenuCommandNames.REDO, canRedo ? redoDescription : StaticTokens.REDO_PLACEHOLDER);
            _globalMenu.setItemEnablement(MenuCommandNames.REDO, canRedo);
        }

        /**
         * Triggered when a notification is received that deals with the availability
         * of common functions, such as creating, deleting or moving items around,
         * performing copy/paste operations, etc.
         */
        private function _onOperationsStatusUpdate(status:Object):void {
            // Update menu items
            var selectionType:String = status[ViewKeys.SELECTION_TYPE] as String;
            var haveSelection:Boolean = (selectionType != null);
            var haveEmptySelection:Boolean = haveSelection && (status[ViewKeys.ELEMENT_EMPTY] as Boolean);

            // Update items in the Copy/Cut/Paste menu
            var pasteSrcType:String = status[ViewKeys.PASTE_SOURCE_TYPE] as String;
            var canCopy:Boolean = status[ViewKeys.COPY_ELEMENT_AVAILABLE] as Boolean;
            var canCut:Boolean = status[ViewKeys.CUT_ELEMENT_AVAILABLE] as Boolean;
            var canPaste:Boolean = status[ViewKeys.PASTE_ELEMENT_AVAILABLE] as Boolean;
            _globalMenu.setItemLabel(MenuCommandNames.COPY,
                    canCopy ? Strings.sprintf(StaticTokens.COPY_LABEL, selectionType) : StaticTokens.COPY_PLACEHOLDER);
            _globalMenu.setItemEnablement(MenuCommandNames.COPY, canCopy);
            _globalMenu.setItemLabel(MenuCommandNames.CUT,
                    canCut ? Strings.sprintf(StaticTokens.CUT_LABEL, selectionType) : StaticTokens.CUT_PLACEHOLDER);
            _globalMenu.setItemEnablement(MenuCommandNames.CUT, canCut);
            _globalMenu.setItemLabel(MenuCommandNames.PASTE,
                    canPaste ? Strings.sprintf(StaticTokens.PASTE_LABEL, pasteSrcType) : StaticTokens.PASTE_PLACEHOLDER);
            _globalMenu.setItemEnablement(MenuCommandNames.PASTE, canPaste);

            // Update items in the Macros menu
            var haveTransposableSelection:Boolean = haveSelection && !haveEmptySelection && (
                    selectionType == DataFields.SECTION ||
                    selectionType == DataFields.PART ||
                    selectionType == DataFields.MEASURE ||
                    selectionType == DataFields.VOICE ||
                    selectionType == DataFields.CLUSTER
            );
            var haveScaleableSelection:Boolean = (haveTransposableSelection && selectionType != DataFields.CLUSTER);
            _globalMenu.setItemEnablement(MenuCommandNames.TRANSPOSE, haveTransposableSelection);
            _globalMenu.setItemEnablement(MenuCommandNames.SCALE_INTERVALS, haveScaleableSelection);
        }

        /**
         * Executed when the main window is shown. Used to close the splash screen and to attach the main menu to the
         * main window (on Windows).
         */
        private function _onMainWindowShown(ignore:String):void {
            _wManager.stopObservingWindowActivity(_mainWinUid, WindowActivity.FOCUS, _onMainWindowShown);
            Time.delay(1, nativeWindow.close);
            if (OSFamily.isWindows) {
                var openedWindows:Array = NativeApplication.nativeApplication.openedWindows;
                for each (var win:NativeWindow in openedWindows) {
                    if (win != _splashNativeWindow) {
                        _globalMenu.registerMainWindow(win);
                        _globalMenu.attach();
                        break;
                    }
                }
            }
        }

        /**
         * Changes the title displayed by the main window of the application.
         * @param title
         */
        private function _setMainWindowTitle(title:String = null):void {
            if (_wManager.isWindowAvailable(_mainWinUid)) {
                title = Strings.trim(title);
                title = title || Descriptor.getAppSignature(true);
                _wManager.updateWindowTitle(_mainWinUid, title);
            }
        }
        ]]>
    </fx:Script>

    <!-- UI for the splash screen: background image and basic app info -->
    <mx:Canvas id="splashImage"
               width="{width}"
               height="{height}"
               styleName="tintorettoBackground"
               chromeColor="{Colors.SPLASH_TEXT_BACKROUND}"/>
    <mx:Label id="copyrightLabel"
              text="by {Descriptor.getAppCopyright(false)}"
              bottom="{Sizes.SPLASH_BOTTOM_MARGIN + 10}"
              right="{Sizes.SPLASH_RIGHT_MARGIN}"
              fontSize="{Sizes.SPLASH_BASE_FONT_SIZE * 1.3}"
              color="{Colors.SPLASH_TEXT_FOREGROUND}"/>
    <mx:Label id="versionLabel"
              text="{Descriptor.getAppVersion()}"
              y="{copyrightLabel.y - versionLabel.height}"
              right="{Sizes.SPLASH_RIGHT_MARGIN}"
              color="{Colors.SPLASH_TEXT_FOREGROUND}"
              fontSize="{Sizes.SPLASH_BASE_FONT_SIZE * 2}"/>
    <mx:Label id="appNameLabel"
              text="{Descriptor.getAppSignature()}"
              color="{Colors.SPLASH_TEXT_FOREGROUND}"
              x="{versionLabel.x - appNameLabel.width}"
              y="{copyrightLabel.y - appNameLabel.height * 0.9}"
              fontSize="{Sizes.SPLASH_BASE_FONT_SIZE * 4}"
              fontWeight="bold"/>
    <mx:Text id="appDescription"
             letterSpacing="1.1"
             text="{Descriptor.read('description')}"
             textAlign="center"
             horizontalCenter="0"
             bottom="5"
             width="99%"
             selectable="false"
             color="{Colors.SPLASH_TEXT_FOREGROUND}"/>
</s:WindowedApplication>
