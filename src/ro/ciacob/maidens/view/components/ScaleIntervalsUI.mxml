<?xml version="1.0" encoding="utf-8"?>
<windows:BasicWindowRootContainer
        creationComplete="_onCreationComplete(event)"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:windows="ro.ciacob.desktop.windows.*"
        styleName="tintorettoBackground"
        width="100%"
        height="100%">

    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace windows "ro.ciacob.desktop.windows.*";

        .alignRight {
            textAlign: right;
        }
    </fx:Style>

    <fx:Script>
		<![CDATA[
        import eu.claudius.iacob.maidens.constants.StaticTokens;
        import eu.claudius.iacob.maidens.constants.ViewKeys;

        import mx.events.FlexEvent;

        import ro.ciacob.desktop.signals.PTT;
        import ro.ciacob.desktop.windows.IWindowsManager;
        import ro.ciacob.desktop.windows.WindowActivity;
        import ro.ciacob.maidens.generators.constants.pitch.Direction;

        import eu.claudius.iacob.maidens.Colors;
        import eu.claudius.iacob.maidens.Sizes;

        import eu.claudius.iacob.maidens.skins.ApplyChangesSkin;
        import eu.claudius.iacob.maidens.skins.ResetChangesSkin;

        import ro.ciacob.maidens.legacy.constants.StaticFieldValues;

        import ro.ciacob.utils.constants.CommonStrings;

        private static const FIRST_COL_WIDTH:uint = 130;
        private static const SECOND_COL_WIDTH:uint = 240;
        private static const SCALE_STRATEGIES_LIST:Array = [
            {label: StaticTokens.NONE, value: 0},
            {label: StaticTokens.SCALE_BY_CONSTANT_FACTOR, value: StaticFieldValues.CONSTANT},
            {label: StaticTokens.SCALE_PROGRESSIVELY, value: StaticFieldValues.PROGRESSIVELY},
            {label: StaticTokens.SCALE_WITH_THRESHOLD, value: StaticFieldValues.THRESHOLD}
        ];
        private static const CONSTANT_FACTOR_MIN:Number = 0.01;
        private static const CONSTANT_FACTOR_MAX:Number = 2;
        private static const FACTOR_LABELS:Array = [
            CommonStrings.EMPTY,
            StaticTokens.CONSTANT_FACTOR_MIN,
            CommonStrings.EMPTY,
            CommonStrings.EMPTY,
            CommonStrings.EMPTY,
            StaticTokens.CONSTANT_FACTOR_MAX,
            CommonStrings.EMPTY
        ];
        private static const FACTOR_TICKS:Array = [1];
        private static const FACTOR_SNAP:Number = 0.01;
        private static const CONSTANT_FACTOR_DEFAULT:uint = 1;
        private static const THRESHOLD_TICKS:Array = [12];
        private static const THRESHOLD_LABELS:Array = [
            CommonStrings.EMPTY,
            StaticTokens.THRESHOLD_MIN,
            CommonStrings.EMPTY,
            CommonStrings.EMPTY,
            CommonStrings.EMPTY,
            StaticTokens.THRESHOLD_MAX,
            CommonStrings.EMPTY
        ];
        private static const THRESHOLD_MIN:Number = 0;
        private static const THRESHOLD_MAX:Number = 24;
        private static const THRESHOLD_SNAP:Number = 1;
        private static const THRESHOLD_DEFAULT:Number = 7;
        private static const VERTICAL_ALIGNMENT_LIST:Array = [
            {label: StaticTokens.ANCHOR_ON_INITIAL_NOTE, value: StaticFieldValues.ANCHOR_ON_INITIAL_NOTE},
            {label: StaticTokens.CENTER_ON_PIVOT_ORIGINAL_PITCH, value: StaticFieldValues.CENTER_ON_PIVOT_PITCH},
            {label: StaticTokens.CEIL_WITHIN_ORIGINAL_RANGE, value: StaticFieldValues.ALIGN_TO_CEILING},
            {label: StaticTokens.FLOOR_WITHIN_ORIGINAL_RANGE, value: StaticFieldValues.ALIGN_TO_FLOOR}
        ];

        [Bindable]
        private var canEnableSection:Boolean;

        [Bindable]
        private var canApply:Boolean;

        [Bindable]
        private var canDiscard:Boolean;

        private var _windowManager:IWindowsManager;
        private var _hasWindowCloseListener:Boolean;
        private var _initialData:Object;
        private var _initialDataChanged:Boolean;
        private var _backupData:Object;
        private var _currentData:Object;

        /**
         * Externally sends values in the UI. Useful to restore last used settings, in the event the user
         * wants to reuse them.
         */
        public function set initialData(value:Object):void {
            _initialData = value;
            _initialDataChanged = true;
            invalidateProperties();
        }

        /**
         * Getting a hold to the Windows manager instance that controls this window, to carry out window
         * closing internally (less round-trip needed to the controller).
         */
        override public function set manager(value:IWindowsManager):void {
            super.manager = value;
            _windowManager = value;
        }

        /**
         * Fires after the component is initialized but after it is drawn on screen. This is the preferred time
         * to transfer buffered, externally set properties into the component.
         */
        override protected function commitProperties():void {
            super.commitProperties();
            if (_windowManager && !_hasWindowCloseListener) {
                _windowManager.observeWindowActivity(windowUid, WindowActivity.BEFORE_DESTROY, _onWindowBeforeDestroy);
                _hasWindowCloseListener = true;
            }

            if (_initialDataChanged) {
                _initialDataChanged = false;
                _writeToUi(_initialData);
                if (!_currentData) {
                    _currentData = _initialData;
                } else {
                    _backupData = _initialData;
                }
                _updateCommitDiscardButtons();
            }
        }

        /**
         * Fires when window is closed by using the "x" button or similar means. Allows
         * halting the operation midway.
         */
        private function _onWindowBeforeDestroy(...ignore):Boolean {
            if (_haveChanges()) {
                _setWarningStatus(true);
                return false;
            } else {
                _prepareForDeletion();
            }
            return true;
        }

        /**
         * Populates the UI with given dataset provided it is not null.
         */
        private function _writeToUi(dataset:Object):void {
            if (dataset) {
                if (ViewKeys.SCALE_STRATEGY in dataset) {
                    var strategyIndex:int = _findItemIndex(SCALE_STRATEGIES_LIST, 'value', dataset[ViewKeys.SCALE_STRATEGY]);
                    scaleStrategy.selectedIndex = strategyIndex;
                }
                if (ViewKeys.SCALE_CONSTANT_FACTOR in dataset) {
                    constantFactor.value = dataset[ViewKeys.SCALE_CONSTANT_FACTOR];
                }
                if (ViewKeys.SCALE_VERTICAL_ALIGN in dataset) {
                    var valignIndex:int = _findItemIndex(VERTICAL_ALIGNMENT_LIST, 'value', dataset[ViewKeys.SCALE_VERTICAL_ALIGN]);
                    verticalAlign.selectedIndex = valignIndex;
                }
                if (ViewKeys.SCALE_CONSOLIDATE_PRIMES in dataset) {
                    resultingPrimes.selectedValue = dataset[ViewKeys.SCALE_CONSOLIDATE_PRIMES];
                }
                if (ViewKeys.SCALE_REVERSE_DIRECTION in dataset) {
                    invertIntervals.selected = dataset[ViewKeys.SCALE_REVERSE_DIRECTION];
                }
                if (ViewKeys.SCALE_START_FACTOR in dataset) {
                    startFactor.value = dataset[ViewKeys.SCALE_START_FACTOR];
                }
                if (ViewKeys.SCALE_END_FACTOR in dataset) {
                    endFactor.value = dataset[ViewKeys.SCALE_END_FACTOR];
                }
                if (ViewKeys.SCALE_THRESHOLD_REALM in dataset) {
                    thresholdOperationRealm.selectedValue = dataset[ViewKeys.SCALE_THRESHOLD_REALM];
                }
                if (ViewKeys.SCALE_THRESHOLD in dataset) {
                    thresholdSemitones.value = dataset[ViewKeys.SCALE_THRESHOLD];
                }
            }
        }

        private static function _findItemIndex(inArray:Array, searchFieldName:String, searchFieldValue:Object):int {
            for (var i:int = 0; i < inArray.length; i++) {
                var testItem:Object = inArray[i] as Object;
                if (searchFieldName in testItem) {
                    if (testItem[searchFieldName] === searchFieldValue) {
                        return i;
                    }
                }
            }
            return -1;
        }

        /**
         * Produces an object with all the current settings in the UI
         */
        private function _readFromUI():Object {
            var dataset:Object = {};
            dataset[ViewKeys.SCALE_STRATEGY] = SCALE_STRATEGIES_LIST[scaleStrategy.selectedIndex].value;
            dataset[ViewKeys.SCALE_CONSTANT_FACTOR] = constantFactor.value;
            dataset[ViewKeys.SCALE_VERTICAL_ALIGN] = VERTICAL_ALIGNMENT_LIST[verticalAlign.selectedIndex].value;
            dataset[ViewKeys.SCALE_CONSOLIDATE_PRIMES] = resultingPrimes.selectedValue;
            dataset[ViewKeys.SCALE_REVERSE_DIRECTION] = invertIntervals.selected;
            dataset[ViewKeys.SCALE_START_FACTOR] = startFactor.value;
            dataset[ViewKeys.SCALE_END_FACTOR] = endFactor.value;
            dataset[ViewKeys.SCALE_THRESHOLD_REALM] = thresholdOperationRealm.selectedValue;
            dataset[ViewKeys.SCALE_THRESHOLD] = thresholdSemitones.value;
            return dataset;
        }

        /**
         * Determines whether user has made changes in the current session. Useful for preventing
         * accidental closing of the window.
         */
        private function _haveChanges():Boolean {
            if (_backupData && _currentData) {
                for (var key:String in _backupData) {
                    if (_backupData[key] != _currentData[key]) {
                        return true;
                    }
                }
            }
            return false;
        }

        /**
         * Causes the UI responsible with submitting or discarding user settings to become available or not,
         * based on the current status.
         */
        private function _updateCommitDiscardButtons():void {
            canDiscard = (_backupData && _currentData && _haveChanges());
            canApply = scaleStrategy &&
                    scaleStrategy.selectedIndex > 0 &&
                    _currentData;
            canEnableSection = (canDiscard || canApply);
        }

        /**
         * Causes the notification area to change color in order to notify the user that he must either save or
         * cancel before.
         */
        private function _setWarningStatus(mustWarn:Boolean):void {
            if (mustWarn) {
                bottomBox.setStyle('backgroundColor', Colors.WARNING);
            } else {
                bottomBox.clearStyle('backgroundColor');
            }
        }

        /**
         * Fired when the user clicks the "commit" button.
         */
        private function _onApplyButtonClick(event:Event):void {
            var commitSource:Object = (_currentData && (_currentData[ViewKeys.SCALE_STRATEGY] as Object) !== 0) ? _currentData :
                    (_backupData && (_backupData[ViewKeys.SCALE_STRATEGY] as Object) !== 0) ? _backupData : null;
            if (commitSource) {
                _backupData = commitSource;
                PTT.getPipe().send(ViewKeys.SCALE_INTERVALS_OPERATION_COMMIT, commitSource);
            }
            _updateCommitDiscardButtons();
            _setWarningStatus(false);
            _closeWindow();
        }

        /**
         * Fired when the user clicks the "cancel" button.
         */
        private function _onResetButtonClick(event:Event):void {
            _currentData = null;
            if (_backupData) {
                _writeToUi(_backupData);
            }
            _updateCommitDiscardButtons();
            _setWarningStatus(false);
            _closeWindow();
        }

        /**
         * Tries to facilitate memory reclaim upon closing of this window.
         */
        private function _prepareForDeletion():void {
            _windowManager.stopObservingWindowActivity(windowUid, WindowActivity.BEFORE_DESTROY, _onWindowBeforeDestroy);
            _backupData = null;
            _currentData = null;
        }

        /**
         * Programmatically closes the window, provided the "auto close" check box was selected.
         */
        private function _closeWindow():void {
            if (autoCloseCheckBox.selected) {
                _prepareForDeletion();
                _windowManager.destroyWindow(windowUid);
                _windowManager = null;
            }
        }

        /**
         * Fired after one of the controls has been changed by the user
         */
        private function _onControlChanged():void {
            _currentData = _readFromUI();
            _updateCommitDiscardButtons();
        }

        /**
         * Fired after the control itself and all children have successfully been initialized and populated,
         * but not drawn on screen. Values of all children are reliable at this point.
         */
        protected function _onCreationComplete(event:FlexEvent):void {
            if (!_backupData) {
                _backupData = _readFromUI();
            }
        }
        ]]>
	</fx:Script>

    <!-- Content -->
    <mx:VBox height="{rule.y - 10}"
             horizontalScrollPolicy="off"
             id="content"
             paddingBottom="10"
             paddingLeft="10"
             paddingRight="10"
             paddingTop="10"
             verticalGap="5"
             width="{width}"
             x="0"
             y="0">

        <!-- Description -->
        <mx:Text width="100%" htmlText="{StaticTokens.MELODIC_INTERVALS_SCALING_INFO}" selectable="false"/>
        <mx:Spacer height="0"/>

        <!-- Strategy -->
        <mx:HBox width="100%">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.SCALE_STRATEGY}{CommonStrings.COLON_SPACE}"
                      toolTip="Choose a type of transformation to apply to melodic intervals in the selected material."/>
            <mx:ComboBox id="scaleStrategy"
                         selectedIndex="0"
                         width="{SECOND_COL_WIDTH}"
                         dataProvider="{SCALE_STRATEGIES_LIST}"
                         labelField="label"
                         change="_onControlChanged()"
                         prompt="{StaticTokens.NONE}"/>
        </mx:HBox>

        <!-- Threshold operating realm. Only visible when "threshold" is selected in "Strategy" -->
        <mx:HBox width="100%" id="thresholdOperationRealmGroup"
                 visible="{scaleStrategy.selectedIndex == 3}"
                 includeInLayout="{scaleStrategy.selectedIndex == 3}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.OPERATE}{CommonStrings.COLON_SPACE}"
                      toolTip="Decide whether to affect smaller or larger intervals with respect to the threshold."/>
            <mx:RadioButtonGroup id="thresholdOperationRealm" selectedValue="{Direction.ABOVE}" labelPlacement="right"
                                 change="_onControlChanged()"/>
            <mx:VBox>
                <mx:RadioButton label="{StaticTokens.ABOVE_THRESHOLD}" value="{Direction.ABOVE}"
                                group="{thresholdOperationRealm}"/>
                <mx:RadioButton label="{StaticTokens.BELOW_THRESHOLD}" value="{Direction.BELOW}"
                                group="{thresholdOperationRealm}"/>
            </mx:VBox>
        </mx:HBox>

        <!-- Threshold. Only visible if "threshold" is selected in "Strategy" -->
        <mx:HBox width="100%" verticalAlign="bottom" id="thresholdGroup" paddingTop="5"
                 visible="{scaleStrategy.selectedIndex == 3}"
                 includeInLayout="{scaleStrategy.selectedIndex == 3}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.THRESHOLD}{CommonStrings.COLON_SPACE}"
                      toolTip="The musical interval that acts as a threshold for the transformation. The value represents semitones."/>
            <mx:Canvas width="100%"
                       styleName="sliderEnforcer"
                       verticalScrollPolicy="off"
                       horizontalScrollPolicy="off"
                       height="{Sizes.SLIDER_ENFORCED_HEIGHT}">
                <mx:HSlider id="thresholdSemitones"
                            y="{Sizes.SLIDER_ENFORCED_Y}"
                            width="100%"
                            liveDragging="false"
                            labels="{THRESHOLD_LABELS}"
                            tickValues="{THRESHOLD_TICKS}"
                            minimum="{THRESHOLD_MIN}"
                            maximum="{THRESHOLD_MAX}"
                            snapInterval="{THRESHOLD_SNAP}"
                            dataTipPrecision="0"
                            tickOffset="-6"
                            labelOffset="6"
                            thumbOffset="-2"
                            change="_onControlChanged()"
                            value="{THRESHOLD_DEFAULT}"/>
            </mx:Canvas>
        </mx:HBox>


        <!-- Constant factor. Only visible if "constant factor" or "threshold" is selected in "Strategy" -->
        <mx:HBox width="100%" verticalAlign="bottom" id="constantFactorGroup" paddingTop="5"
                 visible="{scaleStrategy.selectedIndex == 1 || scaleStrategy.selectedIndex == 3}"
                 includeInLayout="{scaleStrategy.selectedIndex == 1 || scaleStrategy.selectedIndex == 3}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.FACTOR}{CommonStrings.COLON_SPACE}"
                      toolTip="The constant transformation to be applied to melodic intervals within the selection. Value represents a percent of the interval's current size."/>
            <mx:Canvas width="100%"
                       styleName="sliderEnforcer"
                       verticalScrollPolicy="off"
                       horizontalScrollPolicy="off"
                       height="{Sizes.SLIDER_ENFORCED_HEIGHT}">
                <mx:HSlider id="constantFactor"
                            y="{Sizes.SLIDER_ENFORCED_Y}"
                            width="100%"
                            liveDragging="false"
                            labels="{FACTOR_LABELS}"
                            tickValues="{FACTOR_TICKS}"
                            minimum="{CONSTANT_FACTOR_MIN}"
                            maximum="{CONSTANT_FACTOR_MAX}"
                            snapInterval="{FACTOR_SNAP}"
                            tickOffset="-6"
                            labelOffset="6"
                            thumbOffset="-2"
                            change="_onControlChanged()"
                            value="{CONSTANT_FACTOR_DEFAULT}"/>
            </mx:Canvas>
        </mx:HBox>

        <!-- Start factor. Only visible if "progressively" is selected in "Strategy" -->
        <mx:HBox width="100%" verticalAlign="bottom" id="startFactorGroup" paddingTop="5"
                 visible="{scaleStrategy.selectedIndex == 2}"
                 includeInLayout="{scaleStrategy.selectedIndex == 2}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.START_FACTOR}{CommonStrings.COLON_SPACE}"
                      toolTip="The transformation factor to use as the starting point, at the beginning of the selection. Value represents a percent of the interval's current size."/>
            <mx:Canvas width="100%"
                       styleName="sliderEnforcer"
                       verticalScrollPolicy="off"
                       horizontalScrollPolicy="off"
                       height="{Sizes.SLIDER_ENFORCED_HEIGHT}">
                <mx:HSlider id="startFactor"
                            y="{Sizes.SLIDER_ENFORCED_Y}"
                            width="100%"
                            liveDragging="false"
                            labels="{FACTOR_LABELS}"
                            tickValues="{FACTOR_TICKS}"
                            minimum="{CONSTANT_FACTOR_MIN}"
                            maximum="{CONSTANT_FACTOR_MAX}"
                            snapInterval="{FACTOR_SNAP}"
                            tickOffset="-6"
                            labelOffset="6"
                            thumbOffset="-2"
                            change="_onControlChanged()"
                            value="{CONSTANT_FACTOR_DEFAULT}"/>
            </mx:Canvas>
        </mx:HBox>

        <!-- End factor. Only visible if "progressively" is selected in "Strategy" -->
        <mx:HBox width="100%" verticalAlign="bottom" id="endFactorGroup" paddingTop="5"
                 visible="{scaleStrategy.selectedIndex == 2}"
                 includeInLayout="{scaleStrategy.selectedIndex == 2}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.END_FACTOR}{CommonStrings.COLON_SPACE}"
                      toolTip="The final transformation factor, to use at the end of the selection. Value represents a percent of the interval's current size."/>
            <mx:Canvas width="100%"
                       styleName="sliderEnforcer"
                       verticalScrollPolicy="off"
                       horizontalScrollPolicy="off"
                       height="{Sizes.SLIDER_ENFORCED_HEIGHT}">
                <mx:HSlider id="endFactor"
                            y="{Sizes.SLIDER_ENFORCED_Y}"
                            width="100%"
                            liveDragging="false"
                            labels="{FACTOR_LABELS}"
                            tickValues="{FACTOR_TICKS}"
                            minimum="{CONSTANT_FACTOR_MIN}"
                            maximum="{CONSTANT_FACTOR_MAX}"
                            snapInterval="{FACTOR_SNAP}"
                            tickOffset="-6"
                            labelOffset="6"
                            thumbOffset="-2"
                            change="_onControlChanged()"
                            value="{CONSTANT_FACTOR_DEFAULT}"/>
            </mx:Canvas>
        </mx:HBox>

        <!-- Vertical alignment. Visible only when "Strategy" is not set to "none". -->
        <mx:HBox width="100%" id="verticalAlignGroup"
                 visible="{scaleStrategy.selectedIndex > 0}"
                 includeInLayout="{scaleStrategy.selectedIndex > 0}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.ALIGN_RESULT}{CommonStrings.COLON_SPACE}"
                      toolTip="How to place the resulting melodic line with respect to original melodic range."/>
            <mx:ComboBox id="verticalAlign"
                         selectedIndex="0"
                         width="{SECOND_COL_WIDTH}"
                         dataProvider="{VERTICAL_ALIGNMENT_LIST}"
                         labelField="label"
                         change="_onControlChanged()"/>
        </mx:HBox>

        <!-- Consolidate resulting primes. Visible only when "Strategy" is not set to "none". -->
        <mx:HBox width="100%" id="resultingPrimesGroup"
                 visible="{scaleStrategy.selectedIndex > 0}"
                 includeInLayout="{scaleStrategy.selectedIndex > 0}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.RESULTING_PRIMES}{CommonStrings.COLON_SPACE}"
                      toolTip="How to treat resulting prime intervals (repeated notes of same pitch)."/>
            <mx:RadioButtonGroup id="resultingPrimes" selectedValue="{StaticFieldValues.CONSOLIDATE_PRIMES}"
                                 labelPlacement="right"
                                 change="_onControlChanged()"/>
            <mx:VBox>
                <mx:RadioButton label="{StaticTokens.CONSOLIDATE}" value="{StaticFieldValues.CONSOLIDATE_PRIMES}"
                                group="{resultingPrimes}"/>
                <mx:RadioButton label="{StaticTokens.PRESERVE}" value="{StaticFieldValues.PRESERVE_PRIMES}"
                                group="{resultingPrimes}"/>
            </mx:VBox>
        </mx:HBox>

        <!-- Invert intervals. Visible only when "Strategy" is not set to "none". -->
        <mx:HBox width="100%" id="invertIntervalsGroup"
                 visible="{scaleStrategy.selectedIndex > 0}"
                 includeInLayout="{scaleStrategy.selectedIndex > 0}">
            <mx:Label styleName="alignRight" width="{FIRST_COL_WIDTH}"
                      text="{StaticTokens.INVERT_INTERVALS}{CommonStrings.COLON_SPACE}"
                      toolTip="Decide whether to reverse the direction of all melodic intervals in the selection."/>
            <mx:CheckBox id="invertIntervals" change="_onControlChanged()"/>
        </mx:HBox>

    </mx:VBox>

    <!-- Commit / Discard buttons -->
    <mx:HRule id="rule"
              width="{width - 20}"
              x="10"
              y="{bottomBox.y - rule.height - 10}"/>

    <mx:VBox horizontalScrollPolicy="off"
             id="bottomBox"
             paddingBottom="15"
             paddingLeft="15"
             paddingRight="15"
             paddingTop="5"
             verticalScrollPolicy="off"
             width="{width}"
             x="0"
             y="{height - bottomBox.height}">

        <!-- Apply/Discard notice -->
        <mx:Text enabled="{canEnableSection}"
                 id="warningText"
                 selectable="false"
                 styleName="editorNote"
                 text="You must APPLY or RESET the current changes before closing this window."
                 textAlign="left"
                 width="100%"/>

        <mx:HBox horizontalScrollPolicy="off"
                 verticalScrollPolicy="off">

            <!-- Apply / Discard buttons -->
            <mx:Button skin="{ApplyChangesSkin}"
                       click="_onApplyButtonClick(event)"
                       enabled="{canApply}"
                       id="applyButton"
                       toolTip="Apply changes"/>

            <mx:Button skin="{ResetChangesSkin}"
                       click="_onResetButtonClick(event)"
                       enabled="{canDiscard}"
                       id="resetButton"
                       toolTip="Reset changes"/>

            <!-- Auto-close button -->
            <mx:CheckBox enabled="{canEnableSection}"
                         id="autoCloseCheckBox"
                         label="auto close"
                         selected="true"/>

        </mx:HBox>
    </mx:VBox>

</windows:BasicWindowRootContainer>
